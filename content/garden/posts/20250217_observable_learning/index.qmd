---
title: "Part 1: Learning a new way to make visuals with Observable"
subtitle: One of my goals this year is to learn javascript, so Observable seems like a great entry point!
image: "images/observable.jpeg"
date: "02/17/2025"
draft: false
page-layout: article
toc: true
toc_float: true
comments:
  utterances:
    repo: ngiangre/ngiangre.github.io
---

::: column-page

# Introduction 

I like to think I am pretty well versed in R programming and especially using the {ggplot2} package to make visualizations. The great thing about making visualizations in R, among many, is the functional programming where I can make a reusable function that iterates over variables to create many similar plots. 

But sometimes you just want to create one plot, and make sure it's pretty easily interactive, is pretty fast, and can scale. Also motivated by my desire to learn a new approach, I am going to use Observable to generate a plot I would usually make in R. This will be a multi-part post since I'm pretty sure I won't be able to do everything below all at once:

**1. Data:** I will use pediatric drug safety data from the {kidsides} R package.

**2. Tables and Plots:** I will then set out to create a table to show the data and highlight/interpret some syntax. Then, I will create boxplot, scatterplot, and heatmap. Along the way, I will explain the code used to create the plots. I will try to make the points interactive (hover over effect) and modify some aesthetics such as color, tooltips, and labels.

::: panel-tabset

## Data

In addition to getting data from the R package, to make the data available to Observable I have to use [`ojs_define`](https://quarto.org/docs/interactive/ojs/data-sources.html#python-and-r) in order to "lift over" the data from the R environment to the Observable environment in 'ojs' code chunks. `data` then becomes an array of objects.

```{r, warning=FALSE,message=FALSE}
library(kidsides)
library(dplyr)
library(DBI)
con <- kidsides::connect_sqlite_db()
data <- 
    tbl(con,"ade_nichd_enrichment") |> 
    collect()

ojs_define(data = data,small_data = head(data,5))

```

## Observable Object

What does the data look like in Observable if I just print it?

```{ojs}
small_data
```

## Observable Table

Viewing the table is really snappy! Real fast scrolling. This [vignette](https://observablehq.com/@observablehq/input-table) from Observable goes through some cool tricks with the penguins dataset.

```{ojs}
function sparkbar(max) {
  return x => htl.html`<div style="
    background: lightblue;
    width: ${100 * x / max}%;
    float: right;
    padding-right: 3px;
    box-sizing: border-box;
    overflow: visible;
    display: flex;
    justify-content: end;">${x.toLocaleString("en")}`
}

viewof selection = Inputs.table(transpose(data),{
  sort: "odds_ratio",
  reverse: true,
  columns: [
    "odds_ratio", "atc_concept_name", "meddra_concept_name", "nichd", "category"
  ],
  header: {
    odds_ratio: "Odds", 
    atc_concept_name: "Drug", 
    meddra_concept_name: "Event",
    nichd: "NICHD Child Stage",
    category: "Category"
  },
  format: {
    odds_ratio: d3.format(".2f"),
    odds_ratio: sparkbar(d3.max(transpose(data), d => d.odds_ratio))
  }
})
```


1. Inputs.table()

   * This is a built-in Observable Plot Inputs function. It generates an interactive table where users can sort, filter, and explore data.
   
2. transpose(data)

   * transpose() is a helper function from Observable that transforms the data from "wide" format to "long" format (or vice versa, depending on the structure). If data is an array of objects, transpose(data) converts it into an array of arrays, ensuring each column is properly structured for display.
   
3. sort

   * The sort and reverse arguments do wha we expect: sort the odds_ratio column in descending order.
   
4. columns

   * The columns argument allows for selecting and ordering columns for the table. The column names have to be strings. 
   * This argument needs to be in square brackets.
   
5. header

   * But, you can set a new column name (as a string) on the right side of a `:` with the original column name (as a string) on the right.
   * This header argument needs to be in curly braces!
   
6. format

   * `format` allows for controlling how the data is displayed in the table.
   * `d3` refers to D3.js wherein Observable Plot is built on top of. Observable uses D3 for added functionality like formatting. 
   * `sparkbar` is a function that creates an inline spark bar chart. It creates this within HTML to be rendered in the table. The `=>` in JavaScript is used for arrow functions, which provide a more concise syntax for defining functions. The function takes the max value from the odds ratio column using the arrow function. `htl.html` used in the function is a template literal function from the [htl (Hypertext Literal) library](https://github.com/observablehq/htl). It safely generates HTML in Observable notebooks.

Annnnnd, what is really cool is selecting rows in the above table gives a totally reactive table like below:

```{ojs}
Inputs.table(selection)
```

:::

# Conclusion

This post was short but in the next post we'll do some plotting!

:::
