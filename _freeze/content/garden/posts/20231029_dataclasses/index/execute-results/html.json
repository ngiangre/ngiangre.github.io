{
  "hash": "fe5eafc42118c4ce912dd6fa5155c56f",
  "result": {
    "markdown": "---\ntitle: Object Oriented Programming (OOP) with Datasets\nsubtitle: Showing the idea of using OOP to define and manipulate datasets in as standard way\nimage: \"images/INUAA.png\"\ndate: \"10/29/2023\"\ndraft: false\npage-layout: article\ntoc: true\ncomments:\n  utterances:\n    repo: ngiangre/ngiangre.github.io\n---\n\n\nDatasets can come in many different shapes and sizes, such as a number of rows and columns. But what if I need to interface with datasets in a specific but standard way? I can create a class for this.\n\nLet's say I have two datasets that I want to represent in a standard way. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nd1 <- datasets::airquality\nd2 <- datasets::anscombe\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nd1 |> head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  Ozone Solar.R Wind Temp Month Day\n1    41     190  7.4   67     5   1\n2    36     118  8.0   72     5   2\n3    12     149 12.6   74     5   3\n4    18     313 11.5   62     5   4\n5    NA      NA 14.3   56     5   5\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nd2 |> head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  x1 x2 x3 x4   y1   y2    y3   y4\n1 10 10 10  8 8.04 9.14  7.46 6.58\n2  8  8  8  8 6.95 8.14  6.77 5.76\n3 13 13 13  8 7.58 8.74 12.74 7.71\n4  9  9  9  8 8.81 8.77  7.11 8.84\n5 11 11 11  8 8.33 9.26  7.81 8.47\n```\n:::\n:::\n\n\nThese two example datasets are actually classes already (i.e. S3 classes), and are data.frames (which are also classes).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsloop::otype(d1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"S3\"\n```\n:::\n\n```{.r .cell-code}\nsloop::s3_class(d1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nsloop::otype(d2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"S3\"\n```\n:::\n\n```{.r .cell-code}\nsloop::s3_class(d2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data.frame\"\n```\n:::\n:::\n\n\nSo what's the issue if they are already classes? I actually want to know the number of rows and columns including the name of the data. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nstructure(\n    list(\n        \"data.frame\" = NULL,\n        \"ncols\" = NULL,\n        \"nrows\" = NULL\n    ),\n    class = \"my_dataset\"\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$data.frame\nNULL\n\n$ncols\nNULL\n\n$nrows\nNULL\n\nattr(,\"class\")\n[1] \"my_dataset\"\n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}